//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Stock.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StockACEntities : DbContext
    {
        public StockACEntities()
            : base("name=StockACEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<Color> Colors { get; set; }
        public virtual DbSet<Control> Controls { get; set; }
        public virtual DbSet<ControlsToRole> ControlsToRoles { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<OrderExportDetail> OrderExportDetails { get; set; }
        public virtual DbSet<OrderExport> OrderExports { get; set; }
        public virtual DbSet<OrderImportDetail> OrderImportDetails { get; set; }
        public virtual DbSet<OrderImport> OrderImports { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersToRole> UsersToRoles { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
    
        public virtual ObjectResult<GetAllInventories_Result> GetAllInventories(string stockID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var stockIDParameter = stockID != null ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInventories_Result>("GetAllInventories", stockIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int spInsertNewControlToRole(Nullable<int> roleID, string pageName, string controlID, Nullable<int> invisible, Nullable<int> disabled)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var controlIDParameter = controlID != null ?
                new ObjectParameter("ControlID", controlID) :
                new ObjectParameter("ControlID", typeof(string));
    
            var invisibleParameter = invisible.HasValue ?
                new ObjectParameter("invisible", invisible) :
                new ObjectParameter("invisible", typeof(int));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("disabled", disabled) :
                new ObjectParameter("disabled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertNewControlToRole", roleIDParameter, pageNameParameter, controlIDParameter, invisibleParameter, disabledParameter);
        }
    
        public virtual int spInsertNewUserInRole(Nullable<int> userID, Nullable<int> roleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertNewUserInRole", userIDParameter, roleIDParameter);
        }
    }
}
